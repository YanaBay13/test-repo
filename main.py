class Стол:
    def __init__(self, материал: str, количество_ножек: int, высота: float):
        # Атрибуты класса Стол
        self.материал = материал
        self.количество_ножек = количество_ножек
        self.высота = высота

        # Проверка количества ножек
        if self.количество_ножек <= 0:
            raise ValueError("Количество ножек должно быть больше 0.")

    def собрать(self):
        """
        Метод для сборки стола.

        Пример:
        >>> стол = Стол("дерево", 4, 75.0)
        >>> стол.собрать()
        """
        ...

    def разобрать(self):
        """
        Метод для разборки стола.

        Пример:
        >>> стол = Стол("дерево", 4, 75.0)
        >>> стол.разобрать()
        """
        ...

    def покрасить(self, цвет: str):
        """
        Метод для покраски стола в заданный цвет.

        Аргументы:
        цвет (str): Новый цвет стола.

        Пример:
        >>> стол = Стол("дерево", 4, 75.0)
        >>> стол.покрасить("красный")
        """
        ...


class Дерево:
    def __init__(self, вид: str, высота: float, возраст: int):
        # Атрибуты класса Дерево
        self.вид = вид
        self.высота = высота
        self.возраст = возраст

        # Проверка возраста
        if self.возраст < 0:
            raise ValueError("Возраст дерева не может быть отрицательным.")

    def расти(self, годы: int):
        """
        Метод для увеличения возраста и высоты дерева.

        Аргументы:
        годы (int): Количество лет, на которые дерево выросло.

        Пример:
        >>> дерево = Дерево("дуб", 5.0, 10)
        >>> дерево.расти(5)
        """
        ...

    def фотосинтезировать(self):
        """
        Метод для процесса фотосинтеза.

        Пример:
        >>> дерево = Дерево("дуб", 5.0, 10)
        >>> дерево.фотосинтезировать()
        """
        ...

    def сбросить_листья(self):
        """
        Метод для сброса листьев.

        Пример:
        >>> дерево = Дерево("дуб", 5.0, 10)
        >>> дерево.сбросить_листья()
        """
        ...


class Facebook:
    def __init__(self, количество_пользователей: int, год_основания: int, доход: float):
        # Атрибуты класса Facebook
        self.количество_пользователей = количество_пользователей
        self.год_основания = год_основания
        self.доход = доход

        # Проверка года основания
        if self.год_основания < 2004:
            raise ValueError("Год основания Facebook не может быть меньше 2004 года.")

    def зарегистрировать_пользователя(self, имя: str, возраст: int):
        """
        Метод для регистрации нового пользователя.

        Аргументы:
        имя (str): Имя пользователя.
        возраст (int): Возраст пользователя.

        Пример:
        >>> fb = Facebook(2500000000, 2004, 86000000000.0)
        >>> fb.зарегистрировать_пользователя("Иван", 25)
        """
        ...

    def удалить_пользователя(self, имя: str):
        """
        Метод для удаления пользователя.

        Аргументы:
        имя (str): Имя пользователя.

        Пример:
        >>> fb = Facebook(2500000000, 2004, 86000000000.0)
        >>> fb.удалить_пользователя("Иван")
        """
        ...

    def опубликовать_пост(self, текст: str):
        """
        Метод для публикации поста.

        Аргументы:
        текст (str): Текст поста.

        Пример:
        >>> fb = Facebook(2500000000, 2004, 86000000000.0)
        >>> fb.опубликовать_пост("Привет, мир!")
        """
        ...
